---
title: 'Bitcoin Optech Newsletter #225'
permalink: /fr/newsletters/2022/11/09/
name: 2022-11-09-newsletter-fr
slug: 2022-11-09-newsletter-fr
type: newsletter
layout: newsletter
lang: fr
---
Le bulletin d'information cette semaine résume la discussion en cours sur une option
de configuration permettant d'activer la fonction full-RBF dans Bitcoin Core
et décrit un bogue affectant BTCD, LND et d'autres logiciels. Vous trouverez
également nos sections habituelles avec le résumé d'une réunion du Club Bitcoin
Core PR Review, des descriptions de mises à jour et de release candidate,
ainsi qu'un aperçu des principaux changements apportés aux logiciels
d'infrastructure Bitcoin.

## Nouvelles

- **Poursuite de la discussion sur l'activation full-RBF:** comme mentionné dans
  les précédents bulletins---utilisateurs, fournisseurs de services,
  et développeurs de Bitcoin Core ont évalué l'inclusion de l'option de
  configuration `mempoolfullrbf` dans la branche de développement et la
  l'actuelle release candidate version 24.0. Ces précédents bulletins
  d'informations ont résumés de nombreux arguments pour et contre cette option
  [full RBF][topic rbf] ([1][news222 rbf], [2][news223 rbf], [3][news224 rbf]).
  Cette semaine, Suhas Daftuar [a posté][daftuar rbf] sur la liste de diffusion
  Bitcoin-Dev pour faire valoir que nous devrions continuer à maintenir une
  politique de relais où les remplacements sont rejetés pour les transactions
  qui n'optent pas pour le RBF (comme décrit dans le BIP 125), et de plus,
  que nous devrions supprimer le drapeau `mempoolfullrbf` de la dernière
  release candidate de Bitcoin Core et ne pas prévoir de publier un logiciel
  avec ce drapeau, à moins (ou jusqu'à ce) que les circonstances changent sur
  le réseau". Il note :

    - *Le RBF Opt-in est déjà disponible:* toute personne souhaitant
      bénéficier des avantages de RBF Opt-in devrait pouvoir y adhérer en
      utilisant le mécanisme décrit dans le [BIP125][]. Les utilisateurs ne
      seraient servis par le full-RBF que s'il y avait une raison pour laquelle
      ils ne pouvaient pas utiliser le RBF.

    - *Full-RBF ne répare pas ce qui n'est pas déjà cassé par d'autres moyens :*
      Le cas possible où certains utilisateurs d'un protocole multipartite
      pourraient refuser à d'autres utilisateurs la possibilité d'utiliser
      le RBF opt-in a été précédemment [identifié][riard funny games], mais
      Daftuar note que ce protocole est vulnérable à d'autres attaques bon
      marché ou gratuites que le Full-RBF ne résoudrait pas.

    - *Full-RBF supprime des options:* "En l'absence d'autres exemples
      [de problèmes résolus par full-rbf], il ne me semble pas que full-rbf
      résolve les problèmes des utilisateurs de RBF, qui sont déjà libres
      de choisir de soumettre leurs transactions à la politique RBF du BIP 125.
      De ce point de vue, "activer full-rbf" revient en fait à retirer à
      l'utilisateur le choix de soumettre une transaction à un régime de
      politique de non-remplacement."
 
    - *Offrir le non-remplacement n'introduit aucun problème pour les nœuds complets :*
      En effet, il simplifie le traitement de longues chaînes de transactions.

    - *Il n'est pas toujours facile de déterminer la compatibilité des incitations :*
       Daftuar utilise la proposition pour le relais de transaction v3 (voir la
       [Newsletter #220][news220 v3tx]) comme exemple :

       > Supposons que dans quelques années quelqu'un propose d'ajouter un
       > flag "-disable_v3_transaction_enforcement" à notre logiciel, pour
       > laisser les utilisatuers décider d'éteindre cette politique de restriction
       > et traiter les transactions V3 comme des V2, pour toutes les mêmes raisons
       > que l'on ppourrait soutenir aujourd'hui avec fullrbf [...]
       >
       > [Ceci] pourrait être subversif pour rendre les cas d'usage de Lightning
       > sur le travail des transactions v3 [...] nous ne devons pas permettre aux utilisateurs de
       > désactiver cette politique, car tant que cette politique est juste
       > facultative et fonctionnant pour ceux qui le souhaitent, elle ne devrait pas nuire
       > à toute personne que nous offrons un ensemble de règles plus strictes pour
       > cas d'usage particulier.  Ajouter un moyen de contourner ces règles, c'est juste essayer de
       > briser le cas d'utilisation de quelqu'un d'autre, sans essayer d'en ajouter un nouveau. Nous
       > ne devrions pas brandir la "compatibilité des incitations" comme une matraque pour
       > briser des choses qui semblent fonctionner et ne pas causer
       > de préjudice causé à autrui.
       >
       > Je pense que c'est exactement ce qui se passe avec fullrbf.

    Daftuar termine son courriel par trois questions pour ceux qui souhaitent toujours que l'option
    `mempoolfullrbf` soit incluse dans Bitcoin Core :

    1. "Est-ce que fullrbf offre des avantages autres que la rupture
       des pratiques commerciales de zeroconf ?  Si oui, quels sont-ils ?"

    2. "Est-il raisonnable d'appliquer les règles de rbf du BIP 125 à toutes
       les transactions, si ces règles elles-mêmes ne sont pas toujours
       compatibles avec les incitations ?"

    3. "Si quelqu'un devait proposer une option de ligne de commande qui casse
       le relai de transaction v3 dans le futur, y a-t-il une base logique pour
       s'y opposer qui soit cohérente avec l'évolution vers full-rbf maintenant ?"

    À l'heure où nous écrivons ces lignes, personne n'a répondu aux questions de
    Daftuar sur la liste de diffusion, bien que deux réponses à cet ensemble de
    questions aient été publiées sur une [PR][bitcoin core #26438] du site Bitcoin Core
    que Daftuar a ouvert pour proposer de retirer l'option de configuration `mempoolfullrbf`.
    Daftuar plus tard a [clôturé][26438 close] cette PR.

    Au moment de la rédaction de cet article, il n'était pas clair si quelqu'un ferait
    d'autres commentaires sur le sujet.

- **Block parsing bug affecting multiple software:** as reported in
  [Newsletter #222][news222 bug], it appeared that a serious bug
  affecting the BTCD full node and LND LN node was accidentally
  triggered, putting users of the software at risk.  Updated software
  was quickly released.  Shortly after that bug was triggered, Anthony
  Towns [discovered][towns find] a second related bug that could only be
  triggered by miners.  Towns reported the bug to BTCD and LND lead
  maintainer Olaoluwa Osuntokun, who prepared a patch to include in the
  next general update of the software.  Including the security fix
  alongside other changes could hide that a vulnerability was being
  fixed and reduce the chance of it being exploited.  Both Towns and
  Osuntokun responsibly kept the vulnerability private until its fix
  could be deployed.

    Unfortunately, the second related bug was independently rediscovered by
    someone who found a miner to trigger it.  This new bug
    affected BTCD and LND again, but it also affected at least [two
    other][liquid and rust bitcoin vulns] significant projects or
    services.  All users of affected systems should upgrade immediately.
    We repeat our advice from three weeks ago for anyone using any
    Bitcoin software to sign up for security announcements from that
    software’s development team.

    With the release of this newsletter, Optech has also added a special
    topic page where we list the names of [the amazing people who
    responsibly disclosed a vulnerability][topic responsible
    disclosures] that we've summarized in an Optech newsletter.
    There are likely several other disclosures not listed because they
    haven't been made public yet.
    We of course also thank all the reviewers of proposals and
    pull requests whose diligent effort prevented innumerable
    security bugs from making it into released software.

## Bitcoin Core PR Review Club

*In this monthly section, we summarize a recent [Bitcoin Core PR Review Club][]
meeting, highlighting some of the important questions and answers.  Click on a
question below to see a summary of the answer from the meeting.*

[Relax MIN_STANDARD_TX_NONWITNESS_SIZE to 65 non-witness bytes][review club 26265]
is a PR by instagibbs that relaxes the mempool policy's non-witness transaction size
constraints. It allows transactions to be as small as 65 bytes, replacing
the current policy that requires transactions to be at least 85 bytes (see
[Newsletter #222][news222 min relay size]).

Since this Review Club meeting, this PR has been closed in favor of
PR [#26398][bitcoin core #26398], which
relaxes policy even further by disallowing _only_ 64-byte transactions.
The relative merits of these two slightly-different policies were
discussed during the meeting.

{% include functions/details-list.md
  q0="Why was the minimum transaction size 82 bytes?
  Can you describe the attack?"

  a0="The 82-byte minimum, which was introduced by PR [#11423][bitcoin core #11423] in 2018, is
  the size of the smallest standard payment transaction. This was
  presented as a cleanup of the standardness rules. But in reality,
  the change was to prevent a 64-byte transaction from being considered standard,
  because this size allowed a [spoof payment attack][]
  against SPV clients (making them think they've received a payment when they hadn't).
  The attack involves tricking an SPV client into thinking that a 64-byte
  transaction is an inner node of the transaction merkle tree, which is also
  64 bytes in length."

  a0link="https://bitcoincore.reviews/26265#l-35"

  q1="A participant asked, was it was necessary to fix this vulnerability
  covertly, given that it would be very expensive (on the order of USD$1M) to
  carry out this attack, combined with the fact that it seems unlikely
  people would use SPV clients for payments that large?"

  a1="There was some agreement, but one participant pointed out that our
  intuition about this could be wrong."

  a1link="https://bitcoincore.reviews/26265#l-66"

  q2="What does _non-witness size_ mean,
  and why do we care about the non-witness distinction?"

  a2="We care about the non-witness distinction because, as part of the
  segwit upgrade, witness data is excluded from the calculation of the merkle root.
  Since the attack requires the malicious transaction to be 64 bytes in the
  merkle root construction (so it looks like an inner node), we need to exclude
  witness data from it."

  a2link="https://bitcoincore.reviews/26265#l-62"

  q3="Why does setting this policy help to prevent the attack?"

  a3="Since inner merkle tree nodes can only be exactly 64 bytes, a transaction
  of a different size cannot be misinterpreted as an inner merkle node."

  a3link="https://bitcoincore.reviews/26265#l-84"

  q4="Does it eliminate the attack vector entirely?"

  a4="Changing the standardness rules only prevents 64-byte transactions
  from being accepted into mempools and relayed, but such transactions
  may still be consensus-valid and so can be mined into a block.
  For this reason, the attack is still possible, but only with the help of miners."

  a4link="https://bitcoincore.reviews/26265#l-84"

  q5="Why might we want to change the minimum transaction size to 65 bytes,
  apart from the fact that it's unnecessary to obfuscate the CVE?"

  a5="There are legitimate use cases for transactions that are less than 82 bytes.
  One example mentioned is a [Child Pays For Parent (CPFP)][topic cpfp] transaction that assigns
  an entire parent output to fees (such a transaction would have a single input
  and an empty `OP_RETURN` output)."

  a5link="https://bitcoincore.reviews/26265#l-100"

  q6="Between disallowing sizes less than 65 bytes and sizes equal to 64 bytes,
  which approach do you think is better and why?
  What are the implications of both approaches?"

  a6="After some byte-counting discussion, it was agreed that a valid
  but non-standard transaction can be as small as 60 bytes:
  a stripped (non-witness) with a single native segwit input is
  41 B + 10 B header + 8 B value + 1 B `OP_TRUE` or `OP_RETURN` = 60 B."

  a6link="https://bitcoincore.reviews/26265#l-124"
%}

## Releases and release candidates

*New releases and release candidates for popular Bitcoin infrastructure
projects.  Please consider upgrading to new releases or helping to test
release candidates.*

- [Rust Bitcoin 0.28.2][] is a minor release containing a fixes for bugs
  that could "cause some specific transactions and/or blocks to fail to
  deserialize. No known such transactions exist on any public
  blockchain."

- [Bitcoin Core 24.0 RC3][] is a release candidate for the
  next version of the network's most widely used full node
  implementation.  A [guide to testing][bcc testing] is available.

  **Warning:** this release candidate includes the `mempoolfullrbf`
  configuration option which several protocol and application developers
  believe could lead to problems for merchant services as described in
  this newsletter and previous newsletters [#222][news222 rbf] and
  [#223][news223 rbf].  It could also cause problems for transaction
  relay as described in [Newsletter #224][news224 rbf].  Optech
  encourages any services that might be affected to evaluate the RC and
  participate in the public discussion.

## Notable code and documentation changes

*Notable changes this week in [Bitcoin Core][bitcoin core repo], [Core
Lightning][core lightning repo], [Eclair][eclair repo], [LDK][ldk repo],
[LND][lnd repo], [libsecp256k1][libsecp256k1 repo], [Hardware Wallet
Interface (HWI)][hwi repo], [Rust Bitcoin][rust bitcoin repo], [BTCPay
Server][btcpay server repo], [BDK][bdk repo], [Bitcoin Improvement
Proposals (BIPs)][bips repo], and [Lightning BOLTs][bolts repo].*

- [Bitcoin Core #26419][] adds context to the validation interface logs
  detailing why a transaction is removed from the mempool.

- [Eclair #2404][] adds support for Short Channel IDentifier (SCID)
  aliases and [zero-conf channels][topic zero-conf channels]
  even for channel state commitments that don't use [anchor
  outputs][topic anchor outputs].

- [Eclair #2468][] implements [BOLTs #1032][], allowing the ultimate receiver of a payment ([HTLC][topic
  HTLC]) to accept a greater amount than they requested and with a
  longer time before it expires than they requested.  Previously,
  Eclair-based receivers adhered to [BOLT4][]'s requirement that the
  amount and expiry delta equal exactly the amount they requested, but
  that exactitude meant a forwarding node could probe the next hop to
  see if it was the final receiver by changing either value by the
  slightest bit.

- [Eclair #2469][] extends the amount of time it asks the last
  forwarding node to give the next hop to settle a payment.  The last
  forwarding node shouldn't know it's the last forwarding node---it
  shouldn't know that the next hop is the receiver of the payment.  The
  extra settlement time implies that the next hop may be a routing node
  rather than the receiver.  The PR description for this feature states
  that Core Lightning and LDK already implement this behavior.  See also
  the description for Eclair #2468 above.

- [Eclair #2362][] adds support for the `dont_forward` flag for channel
  updates from [BOLTs #999][].  Channel updates change the parameters of
  a channel and are often gossiped to inform other nodes on the network
  about how to use the channel, but when a channel update contains this
  flag, it should not be forwarded to other nodes.

- [Eclair #2441][] allows Eclair to begin receiving onion-wrapped error
  messages of any size.  [BOLT2][] currently recommends 256 byte errors,
  but doesn't forbid longer error messages and [BOLTs #1021][] is open to
  encourage use of 1024-byte error messages encoded using LN's modern
  Type-Length-Value (TLV) semantics.

- [LND #7100][] updates LND to use the latest version of BTCD (as a
  library), fixing the block parsing bug described in the *news* section
  above.

- [LDK #1761][] adds a `PaymentID` parameter to methods for sending
  payments which callers can use to prevent sending multiple identical
  payments.  Additionally, LDK may now continue trying to resend a
  payment indefinitely, rather than the previous behavior of ceasing
  retries after a few blocks of repeated failures; the `abandon_payment`
  method may be used to prevent further retrying.

- [LDK #1743][] provides a new `ChannelReady` event when a channel
  becomes ready to use.  Notably, the event may be issued after a
  channel has received a suitable number of confirmations, or it may be
  issued immediately in the case of a [zero-conf channel][topic zero-conf channels].

- [BTCPay Server #4157][] adds opt-in support for a new version of the
  checkout interface.  See the PR for screenshots and video previews.

- [BOLTs #1032][] allows the ultimate receiver of a payment
  ([HTLC][topic HTLC]) to accept a greater amount than they requested
  and with a longer time before it expires than they requested.  This
  makes it more difficult for a forwarding node to determine that the
  next hop is the receiver by slightly tweaking a payment's parameters.
  See the description of Eclair #2468 above for more information.

{% include references.md %}
{% include linkers/issues.md v=2 issues="26438,26419,5674,2404,2468,2469,2362,2441,7100,1761,1743,4157,1032,1021,999,26398,11423" %}
[bitcoin core 24.0 rc3]: https://bitcoincore.org/bin/bitcoin-core-24.0/
[rust bitcoin 0.28.2]: https://github.com/rust-bitcoin/rust-bitcoin/releases/tag/0.28.2
[bcc testing]: https://github.com/bitcoin-core/bitcoin-devwiki/wiki/24.0-Release-Candidate-Testing-Guide
[news222 rbf]: /en/newsletters/2022/10/19/#transaction-replacement-option
[news223 rbf]: /en/newsletters/2022/10/26/#continued-discussion-about-full-rbf
[news224 rbf]: /en/newsletters/2022/11/02/#mempool-consistency
[daftuar rbf]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021135.html
[riard funny games]: https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-May/003033.html
[news220 v3tx]: /en/newsletters/2022/10/05/#proposed-new-transaction-relay-policies-designed-for-ln-penalty
[news222 bug]: /en/newsletters/2022/10/19/#block-parsing-bug-affecting-btcd-and-lnd
[liquid and rust bitcoin vulns]: https://twitter.com/Liquid_BTC/status/1587499305664913413
[spoof payment attack]: /en/topics/cve/#CVE-2017-12842
[towns find]: https://twitter.com/roasbeef/status/1587481219981508608
[26438 close]: https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1307715677
[review club 26265]: https://bitcoincore.reviews/26265
[news222 min relay size]: /en/newsletters/2022/10/19/#minimum-relayable-transaction-size
